[{"/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/reportWebVitals.js":"1","/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/index.js":"2","/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/ListContainer.js":"3","/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/App.js":"4","/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/List.js":"5","/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/EditListForm.js":"6","/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/NewListForm.js":"7"},{"size":362,"mtime":1608365421142,"results":"8","hashOfConfig":"9"},{"size":500,"mtime":1608365421141,"results":"10","hashOfConfig":"9"},{"size":2086,"mtime":1608468644957,"results":"11","hashOfConfig":"9"},{"size":204,"mtime":1608372292989,"results":"12","hashOfConfig":"9"},{"size":293,"mtime":1608389757531,"results":"13","hashOfConfig":"9"},{"size":863,"mtime":1608395086675,"results":"14","hashOfConfig":"9"},{"size":738,"mtime":1608396526401,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pflv6e",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/reportWebVitals.js",[],"/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/index.js",[],"/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/ListContainer.js",["32"],"import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport List from './List';\nimport EditListForm from './EditListForm';\nimport NewListForm from './NewListForm';\n\nfunction ListContainer() {\n  const [lists, setLists] = useState([]);\n  const [editingListId, setEditingListId] = useState();\n  \n  useEffect(() =>{\n    axios.get('http://localhost:3001/api/v1/lists.json')\n        .then(response => {\n            console.log(response)\n            setLists(response.data)\n        })\n        .catch(error => console.log(error))\n  },[])\n  console.log(lists);\n\n  const removeList = (id) => {\n    axios.delete( 'http://localhost:3001/api/v1/lists/' + id )\n    .then((response) => {\n        const filtered_lists = lists.filter(\n            list => list.id !== id\n        )\n        console.log(filtered_lists);\n        setLists(filtered_lists)\n        console.log(\"ðŸ¦… \");\n        console.log(lists)\n    })\n    .catch(error => console.log(error))\n  }\n\n  const editList= (id, title, excerpt) => {\n    axios.put( 'http://localhost:3001/api/v1/lists/' + id, { \n        list: {\n            title, \n            excerpt\n        } \n    })\n    .then(response => {\n        console.log(response);\n        const lists = lists;\n        lists[id-1] = {id, title, excerpt}\n        setLists(lists);\n        setEditingListId(null);\n    })\n    .catch(error => console.log(error));\n  }\n\n  const addNewList=(title, excerpt) =>{\n    axios.post( 'http://localhost:3001/api/v1/lists', { list: {title, excerpt} })\n    .then(response => {\n        console.log(response)\n        \n        setLists([ ...lists, response.data ])\n    })\n    .catch(error => {\n        console.log(error)\n    })\n  }\n\n  return (\n    <div className=\"listContainer\">\n      <h1>LISTS</h1>\n      {lists.map( (list) => editingListId === list.id ? (\n          <EditListForm list={list} key={list.id} editList={editList}/>\n        ):(\n          <List list={list} key={list.id} onRemoveList={removeList}/>\n        )\n      )}\n      <NewListForm onNewList={addNewList} />\n      <br/>\n    </div>\n  )\n}\n\nexport default ListContainer\n","/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/App.js",[],"/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/List.js",[],"/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/EditListForm.js",["33","34"],"import React, { Component, useState } from 'react';\nfunction EditListForm(props) {\n\n  const [list, setList]= useState({\n    id:'',\n    title:'',\n    excerpt:''\n  });\n  const handleChange = (e) => {\n    setList({[e.target.name]: e.target.value})\n  }\n  \n  const handleSubmit=(e)=>{\n      e.preventDefault();\n      props.editList(list.id, list.title, list.excerpt);\n  }\n  \n  return\n    (\n      <form onSubmit={handleSubmit}>\n        <input  name=\"title\"\n                type=\"text\"\n                placeholder=\"Title...\"\n                value={list.title}\n                onChange={handleChange} />\n        <input  name=\"excerpt\"\n                type=\"text\"\n                placeholder=\"Excerpt...\"\n                value={list.excerpt}\n                onChange={handleChange} />\n        <button>Update List</button>\n    </form>  \n    )\n}\nexport default EditListForm;","/Users/prashanth/Documents/boilerplates/boilerplate-railsapi-reactapp/client/src/NewListForm.js",[],{"ruleId":"35","severity":1,"message":"36","line":44,"column":23,"nodeType":"37","messageId":"38","endLine":44,"endColumn":28},{"ruleId":"39","severity":1,"message":"40","line":1,"column":17,"nodeType":"37","messageId":"41","endLine":1,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":19,"column":5,"nodeType":"44","messageId":"45","endLine":33,"endColumn":6},"no-use-before-define","'lists' was used before it was defined.","Identifier","usedBeforeDefined","no-unused-vars","'Component' is defined but never used.","unusedVar","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode"]